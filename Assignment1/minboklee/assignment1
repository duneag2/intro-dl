Question 1. How can I move to the directory I want using the library os & Linux Command?
I'd like to move to the directory name '/content/sample_data'.


Answer 1. 

import os

directory_path = '/content/sample_data'

os.chdir(directory_path)



///


Question 2. Please write a code that copies new.txt with a file name new3.txt.
Directory: /content/drive/MyDrive/intro-dl/afhq/new_folder



Answer 2. 


import shutil
import os

# Change directory to the target location
os.chdir('/content/drive/MyDrive/intro-dl/afhq/new_folder')

source_file = 'new.txt'
destination_file = 'new3.txt'

shutil.copy(source_file, destination_file)


///


Question 3. Compute L1/L2 Norm between matrix1 and matrix2 above.
Hint: https://pytorch.org/docs/stable/generated/torch.linalg.norm.html


Answer 3. 

import torch
import torch.nn.functional as F

matrix1 = torch.tensor([[1., 2.], [3., 4.]])
matrix2 = torch.tensor([[5., 6.], [7., 8.]])

# L1 norm
l1_norm = torch.linalg.norm(matrix1 - matrix2, ord=1)
print("L1 Norm between matrix1 and matrix2:", l1_norm.item())

# L2 norm
l2_norm = torch.linalg.norm(matrix1 - matrix2, ord=2)
print("L2 Norm between matrix1 and matrix2:", l2_norm.item())




# cosine similarity (with flattening the matrices)
cos_sim = F.cosine_similarity(matrix1.flatten(), matrix2.flatten(), dim=0)
print("Cosine Similarity between matrix1 and matrix2:", cos_sim.item())



///

Question 4. Please write a line-by-line explanation of the code above. (Simple MLP only)


# Import necessary libraries
import numpy as np
import matplotlib.pyplot as plt
import torch
import torch.nn as nn
import torch.nn.functional as F
from torchvision import transforms, datasets

# Check if CUDA (GPU) is available, else use CPU
if torch.cuda.is_available():
    DEVICE = torch.device('cuda')
else:
    DEVICE = torch.device('cpu')
print('Using PyTorch version:', torch.__version__, ' Device:', DEVICE)

# Define batch size and number of epochs
BATCH_SIZE = 32
EPOCHS = 10

# Download and prepare MNIST dataset for training and testing
train_dataset = datasets.MNIST(root="../data/MNIST", train=True, download=True, transform=transforms.ToTensor())
test_dataset = datasets.MNIST(root="../data/MNIST", train=False, transform=transforms.ToTensor())

train_loader = torch.utils.data.DataLoader(dataset=train_dataset, batch_size=BATCH_SIZE, shuffle=True)
test_loader = torch.utils.data.DataLoader(dataset=test_dataset, batch_size=BATCH_SIZE, shuffle=False)



