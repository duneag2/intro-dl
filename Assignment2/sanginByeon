
# Question 1. Please write a line-by-line explanation of the code above.

## Question 1
errors = [] # Initializes an empty list to store the error values for each epoch.

# w, b: random initialization -- result may vary each time you execute the code
w = np.random.uniform(low=-1.0, high=1.0)
b = np.random.uniform(low=-1.0, high=1.0)

# Starts a loop that will run for a specified number of epochs (num_epoch). An epoch is one complete iteration over the entire training dataset.
for epoch in range(num_epoch):
    y_hat = x * w + b # 

    error = ((y_hat - y)**2).mean() # Calculates the mean squared error
    if error < 0.0005:
        break # assuming that the model has converged and further training is unnecessary.

    w = w - learning_rate * ((y_hat - y) * x).mean() # Updates the weight (w) using gradient descent.
    b = b - learning_rate * (y_hat - y).mean() # Updates the bias (b) using gradient descent.

    errors.append(error) # Appends the current error to the errors list to track the error values over epochs.

    if epoch % 5 == 0:
        print("{0:2} w = {1:.5f}, b = {2:.5f} error = {3:.5f}".format(epoch, w, b, error))

print("----" * 15)
print("{0:2} w = {1:.1f}, b = {2:.1f} error = {3:.5f}".format(epoch, w, b, error))



# Question 2. Sorting with numpy

# (1) We've just sorted the vector in increasing order. Can you sort the same vector in decreasing order?
np.sort(arr)[::-1]

# np.sort(arr)는 배열을 오름차순으로 정렬
# [::-1]을 사용하여 정렬된 배열을 뒤집기


# (2) Explain the numpy argsort function and execute the code with arr_mixed.   

numpy.argsort 함수는 배열의 원소들을 정렬했을 때의 인덱스를 반환하는 함수
배열을 직접 정렬하지 않고, 배열을 정렬했을 때 각 원소가 원래 배열에서 어떤 위치에 있었는지를 나타내는 인덱스 배열을 반환

# code.
import numpy as np

# 예제 배열 생성
arr_mixed = np.array([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5])

# argsort를 사용하여 정렬된 인덱스 얻기
sorted_indices = np.argsort(arr_mixed)

print("원본 배열:", arr_mixed)
print("정렬된 인덱스:", sorted_indices)

# 정렬된 순서대로 배열 정렬하기
sorted_array = arr_mixed[sorted_indices]
print("정렬된 배열:", sorted_array)



# Question 3. Matplotlib

# (1) What is alpha and cmap above? Google it and write the answer.

alpha 파라미터는 플롯 요소의 투명도 수준을 설정, 0에서 1 사이이며, 0은 완전히 투명하고 1은 완전히 불투명
cmap 파라미터는 "colormap"의 약자로, 플롯에서 스칼라 데이터를 색상에 매핑하는 데 사용

# (2) Write and execute a code that has alpha=0.1. Can you see the difference?

alpha=0.1로 설정하면 산점도의 점들이 alpha=0.5로 설정된 경우보다 훨씬 더 투명해져 점들이 더 옅어짐.

# (3) Check the type of cmap and run the code that changed the type of cmap.

cmap 타입은 일반적으로 컬러맵의 이름을 나타내는 문자열인데
'spectral' 대신 'viridis'로 변경

import matplotlib.pyplot as plt
import numpy as np

np.random.seed(0)

n = 20
x = np.random.rand(n)
y = np.random.rand(n)

plt.scatter(x, y, alpha=0.1, cmap='viridis') # spectral 대신 viridis로 변경함.
plt.colorbar()
plt.show()
